---

kuber_config_only: no

################################################################################
# kubernetes master configuration variables
################################################################################

# --logtostderr=true: log to standard error instead of files
#kube_logtostderr:--logtostderr=true"

# journal message level, 0 is debug
kube_log_level:"--v=0"

# should this cluster be allowed to run privileged docker containers
kube_allow_priv:"--allow-privileged=false"

# how the controller-manager, scheduler, and proxy find the apiserver
# kube_master:--master=http://127.0.0.1:8080"
kube_master:"--master=http://{{ master_address }}:8080"

# --etcd-servers=[]: list of etcd servers to watch (http://ip:port),
# comma separated. mutually exclusive with -etcd-config
kube_etcd_servers:"--etcd-servers={{ etcd_servers }}"

# --insecure-bind-address=127.0.0.1: the ip address on which to serve the --insecure-port.
kube_api_address:"--insecure-bind-address={{ master_address }}"

# --insecure-port=8080: the port on which to serve unsecured, unauthenticated access.
kube_api_port:"--insecure-port=8080"

# --kubelet-port=10250: kubelet port
node_port:"--kubelet-port=10250"

# --advertise-address=<nil>: the ip address on which to advertise
# the apiserver to members of the cluster.
kube_advertise_addr:"--advertise-address={{ master_address }}"

# --allow-privileged=false: if true, allow privileged containers.
kube_allow_priv:"--allow-privileged=false"

# --service-cluster-ip-range=<nil>: a cidr notation ip range from which to assign service cluster ips.
# this must not overlap with any ip ranges assigned to nodes for pods.
kube_service_addresses:"--service-cluster-ip-range={{ service_cluster_ip_range }}"

# --admission-control:alwaysadmit": ordered list of plug-ins
# to do admission control of resources into cluster.
# comma-delimited list of:
#   limitranger, alwaysdeny, securitycontextdeny, namespaceexists,
#   namespacelifecycle, namespaceautoprovision,
#   alwaysadmit, serviceaccount, resourcequota
kube_admission_control:"--admission-control={{ admission_control }}"

# --client-ca-file:": if set, any request presenting a client certificate signed
# by one of the authorities in the client-ca-file is authenticated with an identity
# corresponding to the commonname of the client certificate.
kube_api_client_ca_file:"--client-ca-file=/srv/kubernetes/ca.crt"

# --tls-cert-file:": file containing x509 certificate for https.  (ca cert, if any,
# concatenated after server cert). if https serving is enabled, and --tls-cert-file
# and --tls-private-key-file are not provided, a self-signed certificate and key are
# generated for the public address and saved to /var/run/kubernetes.
kube_api_tls_cert_file:"--tls-cert-file=/srv/kubernetes/server.cert"

# --tls-private-key-file:": file containing x509 private key matching --tls-cert-file.
kube_api_tls_private_key_file:"--tls-private-key-file=/srv/kubernetes/server.key"

################################################################################
# kube-controller-manager configuration
################################################################################

# --root-ca-file:": if set, this root certificate authority will be included in
# service account's token secret. this must be a valid pem-encoded ca bundle.
kube_controller_manager_root_ca_file:"--root-ca-file=/srv/kubernetes/ca.crt"

# --service-account-private-key-file:": filename containing a pem-encoded private
# rsa key used to sign service account tokens.
kube_controller_manager_service_account_private_key_file:"--service-account-private-key-file=/srv/kubernetes/server.key"

################################################################################
# kube-scheduler configuration
################################################################################
###
# add your own!
kube_scheduler_args:"
